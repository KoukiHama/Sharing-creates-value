{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Open Source Tooling for Open Source Compliance A Single Focus This work group is focused on reducing resource costs and improving the quality of results around open source compliance activities. The work group uses open source principles to accomplish this. It is a meritocracy producing real world solutions for real world challenges and it shares results to all interested parties. We are making turn-key Open Source tooling for Open Source Compliance We are considering what open data database(s) can support this We plan to work with existing projects to make this happen (Bang, FOSSology, ORT, SPDX, sw360 and the online data from SW Heritage and ClearlyDefined) This activity is part of the OpenChain Project. Here is a brief description of the hierarchy: The OpenChain Project (www.openchainproject.org) maintains the standard for open source compliance in the supply chain. It also provides reference material and collaborative activities in this field. The OpenChain Project has various Work Groups where volunteers work on specific compliance challenges. Some Work Groups like Automotive and Tooling are global, some like the Japan Work Group are local. The OpenChain Project Tooling Work Group is using the Sharing Creates Value GitHub Repository and OSS Compliance Tooling mailing list to coordinate activity around open source compliance tooling. You can learn more on our Github space","title":"Introduction"},{"location":"#open-source-tooling-for-open-source-compliance","text":"","title":"Open Source Tooling for Open Source Compliance"},{"location":"#a-single-focus","text":"This work group is focused on reducing resource costs and improving the quality of results around open source compliance activities. The work group uses open source principles to accomplish this. It is a meritocracy producing real world solutions for real world challenges and it shares results to all interested parties. We are making turn-key Open Source tooling for Open Source Compliance We are considering what open data database(s) can support this We plan to work with existing projects to make this happen (Bang, FOSSology, ORT, SPDX, sw360 and the online data from SW Heritage and ClearlyDefined) This activity is part of the OpenChain Project. Here is a brief description of the hierarchy: The OpenChain Project (www.openchainproject.org) maintains the standard for open source compliance in the supply chain. It also provides reference material and collaborative activities in this field. The OpenChain Project has various Work Groups where volunteers work on specific compliance challenges. Some Work Groups like Automotive and Tooling are global, some like the Japan Work Group are local. The OpenChain Project Tooling Work Group is using the Sharing Creates Value GitHub Repository and OSS Compliance Tooling mailing list to coordinate activity around open source compliance tooling. You can learn more on our Github space","title":"A Single Focus"},{"location":"contact/","text":"Contact Register to our mailing list We use our mailing list for discussions, announcements of meeting and distribution of news. If you want to be part of the mailing list please go to our subscription page: https://groups.io/g/oss-based-compliance-tooling The email address is: oss-based-compliance-tooling@groups.io Join our slack channel https://join.slack.com/t/ossbasedcompl-bhx9742/shared_invite/enQtNzA5OTc3OTAwMjExLWNhYWVkZDk2Y2RlNDI4ODI2NzQyNDU5ZWE4ODRmZWI1ZmM1MzA4ZTc2MTdkZGFhMzc2NmUyODRhNDZjNWI5Njc Address The Tooling Group represented by Oliver Fendt Balanstr 228 81549 M\u00fcnchen","title":"Contact"},{"location":"contact/#contact","text":"","title":"Contact"},{"location":"contact/#register-to-our-mailing-list","text":"We use our mailing list for discussions, announcements of meeting and distribution of news. If you want to be part of the mailing list please go to our subscription page: https://groups.io/g/oss-based-compliance-tooling The email address is: oss-based-compliance-tooling@groups.io","title":"Register to our mailing list"},{"location":"contact/#join-our-slack-channel","text":"https://join.slack.com/t/ossbasedcompl-bhx9742/shared_invite/enQtNzA5OTc3OTAwMjExLWNhYWVkZDk2Y2RlNDI4ODI2NzQyNDU5ZWE4ODRmZWI1ZmM1MzA4ZTc2MTdkZGFhMzc2NmUyODRhNDZjNWI5Njc","title":"Join our slack channel"},{"location":"contact/#address","text":"The Tooling Group represented by Oliver Fendt Balanstr 228 81549 M\u00fcnchen","title":"Address"},{"location":"Good-Practices/Tips-for-license-compliance-work/","text":"This file contains useful tips and answers to questions, which raise during the daily work in the context of OSS license compliance. Question or Problem: I need to make use to the \"or (at your option) any later version\" in the LGPL, GPL, MPL, how do I do that in a license compliant way? The following scenario shall illustrate the question: There is a library all the source files it consists of carry the following license information: \u201cThis library is free software; you can redistribute it and/or modify it under the terms of the GNU Library General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.\u201d The COPYING file contains the text of the LGPL-2.0 For some reason it is necessary for me to use the library under the terms of LGPL-2.1, I cannot use the library under the terms of LGPL-2.0. So I need to \u201cupgrade\u201d the license from LGPL-2.0 to LGPL-2.1. How can I do this? One way to go: In case of LGPL / GPL licensed files, check whether all relevant files carry a statement whether you are allowed to use a later version of the license (like the standard header above). Assuming that the result of the check is that all relevant files carry such a statement, proceed like follows: Add the text of the LGPL-2.1 to the library (e.g. as COPYING-LGPL-2.1) Keep the text of the LGPL-2.0 in the library (the COPYING file) Provide the required material (complete corresponding source code, etc.) to the downstream users accompanied with a written note in the context of the library like: \"To the extend files are licensed under LGPL-2.0 or at your option any later version, in this context LGPL-2.1 has been chosen. Please take a look at COPYING-LGPL-2.1. This shall not restrict the freedom of other users to choose either LGPL-2.0 or at their option any later version.\u201d For MPL licensed software the procedure is very similar, the main difference is that the license text of the MPL (at least I have checked it for version 1.1 and 2.0) allows the use of a newer version of the license per default (for further details see remarks). Which means that you have to check the relevant (source) files, if there is a statement made by the original author that disallows the use of a newer version of the MPL. Assuming that the result of the check is that no file carries such a statement, proceed like follows: 2. Add the text of the version of the MPL you want to use to the software (e.g. as COPYING-MPL-2.0) 3. Keep the text of the former version of the MPL in the software (e.g in the COPYING file) 4. Provide the required material to the downstream users accompanied with a written note in the context of that software: \"To the extend files are licensed under MPL-1.1, in this context MPL-2.0 has been chosen in accordance with section 6.2 of the MPL-1.1. This shall not restrict the freedom of other users to choose either MPL-1.1 or at their option any later version.\u201d Remarks / Explanations: Why is it done this way: Because I have to check whether the original author allows me to use an successor version of the License he has chosen, due to this step 1. is required. Secondly I do not want to take away the freedom of people wanting to use the software under the elder (original) version of the license but I have to state clearly that I distribute the software under a newer version of the license. Last but not least, only sending the original license text, without adding the text of the version I use, will cause a license compliance problem. Because when I choose the newer version of the license I am bound to the obligations of the newer license and thus I have to provide the license text of the newer license, too. References from some Licenses for more detail: Section 13 of the LGPL-2.1: \"Each version is given a distinguishing version number. If the Library specifies a version number of this License which applies to it and \"any later version\", you have the option of following the terms and conditions either of that version or of any later version published by the Free Software Foundation. If the Library does not specify a license version number, you may choose any version ever published by the Free Software Foundation.\" The text of the LPGL-2.1 is available at: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.txt The Free Software Foundation, Inc. holds the copyright of the LGPL-2.1 Section 6.2 of the MPL-1.1 \"Once Covered Code has been published under a particular version of the License, You may always continue to use it under the terms of that version. You may also choose to use such Covered Code under the terms of any subsequent version of the License published by Netscape. No one other than Netscape has the right to modify the terms applicable to Covered Code created under this License.\" The text of the MPL-1.1 is available at: https://www.mozilla.org/media/MPL/1.1/index.0c5913925d40.txt Section 10.2 of the MPL-2.0 \"You may distribute the Covered Software under the terms of the version of the License under which You originally received the Covered Software, or under the terms of any subsequent version published by the license steward.\" The text of the MPL-2.0 is available at: https://www.mozilla.org/en-US/MPL/2.0/","title":"Tips for license compliance work"},{"location":"Good-Practices/Tips-for-license-compliance-work/#question-or-problem","text":"I need to make use to the \"or (at your option) any later version\" in the LGPL, GPL, MPL, how do I do that in a license compliant way? The following scenario shall illustrate the question: There is a library all the source files it consists of carry the following license information: \u201cThis library is free software; you can redistribute it and/or modify it under the terms of the GNU Library General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.\u201d The COPYING file contains the text of the LGPL-2.0 For some reason it is necessary for me to use the library under the terms of LGPL-2.1, I cannot use the library under the terms of LGPL-2.0. So I need to \u201cupgrade\u201d the license from LGPL-2.0 to LGPL-2.1. How can I do this?","title":"Question or Problem:"},{"location":"Good-Practices/Tips-for-license-compliance-work/#one-way-to-go","text":"In case of LGPL / GPL licensed files, check whether all relevant files carry a statement whether you are allowed to use a later version of the license (like the standard header above). Assuming that the result of the check is that all relevant files carry such a statement, proceed like follows: Add the text of the LGPL-2.1 to the library (e.g. as COPYING-LGPL-2.1) Keep the text of the LGPL-2.0 in the library (the COPYING file) Provide the required material (complete corresponding source code, etc.) to the downstream users accompanied with a written note in the context of the library like: \"To the extend files are licensed under LGPL-2.0 or at your option any later version, in this context LGPL-2.1 has been chosen. Please take a look at COPYING-LGPL-2.1. This shall not restrict the freedom of other users to choose either LGPL-2.0 or at their option any later version.\u201d For MPL licensed software the procedure is very similar, the main difference is that the license text of the MPL (at least I have checked it for version 1.1 and 2.0) allows the use of a newer version of the license per default (for further details see remarks). Which means that you have to check the relevant (source) files, if there is a statement made by the original author that disallows the use of a newer version of the MPL. Assuming that the result of the check is that no file carries such a statement, proceed like follows: 2. Add the text of the version of the MPL you want to use to the software (e.g. as COPYING-MPL-2.0) 3. Keep the text of the former version of the MPL in the software (e.g in the COPYING file) 4. Provide the required material to the downstream users accompanied with a written note in the context of that software: \"To the extend files are licensed under MPL-1.1, in this context MPL-2.0 has been chosen in accordance with section 6.2 of the MPL-1.1. This shall not restrict the freedom of other users to choose either MPL-1.1 or at their option any later version.\u201d","title":"One way to go:"},{"location":"Good-Practices/Tips-for-license-compliance-work/#remarks-explanations","text":"Why is it done this way: Because I have to check whether the original author allows me to use an successor version of the License he has chosen, due to this step 1. is required. Secondly I do not want to take away the freedom of people wanting to use the software under the elder (original) version of the license but I have to state clearly that I distribute the software under a newer version of the license. Last but not least, only sending the original license text, without adding the text of the version I use, will cause a license compliance problem. Because when I choose the newer version of the license I am bound to the obligations of the newer license and thus I have to provide the license text of the newer license, too. References from some Licenses for more detail: Section 13 of the LGPL-2.1: \"Each version is given a distinguishing version number. If the Library specifies a version number of this License which applies to it and \"any later version\", you have the option of following the terms and conditions either of that version or of any later version published by the Free Software Foundation. If the Library does not specify a license version number, you may choose any version ever published by the Free Software Foundation.\" The text of the LPGL-2.1 is available at: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.txt The Free Software Foundation, Inc. holds the copyright of the LGPL-2.1 Section 6.2 of the MPL-1.1 \"Once Covered Code has been published under a particular version of the License, You may always continue to use it under the terms of that version. You may also choose to use such Covered Code under the terms of any subsequent version of the License published by Netscape. No one other than Netscape has the right to modify the terms applicable to Covered Code created under this License.\" The text of the MPL-1.1 is available at: https://www.mozilla.org/media/MPL/1.1/index.0c5913925d40.txt Section 10.2 of the MPL-2.0 \"You may distribute the Covered Software under the terms of the version of the License under which You originally received the Covered Software, or under the terms of any subsequent version published by the license steward.\" The text of the MPL-2.0 is available at: https://www.mozilla.org/en-US/MPL/2.0/","title":"Remarks / Explanations:"},{"location":"OSS-license-compliance-resources/","text":"Content of the directory In this directory you will find the following information / resources: * Declaration blue print for products containing OSS * more to come Declaration blue print for products containing OSS This blue print is designed to ease drafting product documentation containing the necessary references to Open Source Software used in products. Main areas of the text were written with the support of lawyers.","title":"Content of the directory"},{"location":"OSS-license-compliance-resources/#content-of-the-directory","text":"In this directory you will find the following information / resources: * Declaration blue print for products containing OSS * more to come","title":"Content of the directory"},{"location":"OSS-license-compliance-resources/#declaration-blue-print-for-products-containing-oss","text":"This blue print is designed to ease drafting product documentation containing the necessary references to Open Source Software used in products. Main areas of the text were written with the support of lawyers.","title":"Declaration blue print for products containing OSS"},{"location":"Tooling-Landscape/","text":"Overview The use of OSS in products, services and other offerings is increasing exponentially, additionally the release cycles of products and services become shorter and shorter. To cope with this situation an as much as possible automated compliance toolchain needs to exist. When we talk about product developement and a CI/CD toolchain for it, we need also to integrate all other tools, which are necessary for product developement or which contribute to product development into the CI/CD toolchain, otherwise the product release will be slowed down significantly by the not integrated processes, which are necessary to release a product. Up to now in many companies these, so called supporting, processes are often not integrated in the CI/CD toolchain and are sometimes not as automated as they could be. This applies also to the OSS compliance process. In other words the OSS compliance process needs to be as automated as possible and the used tools for OSS compliance need to be fully integrated in the develpment CI/CD toolchain. This requires that the different tools need to provide suited APIs to be plugged in easily into the different developement toolchains. Moreover more and more publicly available services and data sources dealing with OSS compliance matters, these need also be considered and integrated in this workflow. To have an integrated OSS compliance process means not only the process to produce the compliance artifacts for outbound products, also contributions back to the OSS ecosystem have to be integrated to ensure that contributions can be fedback in a timely manner. To build an integrated end to end compliance toolchain is not about to build a monolithic monster, it is about to use current available Open Source tools and define and implement the needed APIs/Data structures they need to provide, in order to plug them into the current set up CI/CD workflow and to enable them to trigger other Open Source compliance tools in a way that they seamlessly interact which each other and potential external data sources. Building a monolithic monster will not work neither for the project that aims to build it nor for most of the entities that have a demand in tooling. This is proven by many other projects which had this objective no matter whether they were OSS or commercial ones. We follow the \"Unix\" like aproach - there is one tool for a certain required functionality which is specialized on that functionality and these different tools can be hooked up easily to form in the end a complaince pipeline. This is also the most suited strategy to get those tools widely adopted since many entities have some tooling available and an existing landscape, they simply cannot go for a \"big bang\" migration, a smooth migration is key here. Abstract Toolchain","title":"Overview"},{"location":"Tooling-Landscape/#overview","text":"The use of OSS in products, services and other offerings is increasing exponentially, additionally the release cycles of products and services become shorter and shorter. To cope with this situation an as much as possible automated compliance toolchain needs to exist. When we talk about product developement and a CI/CD toolchain for it, we need also to integrate all other tools, which are necessary for product developement or which contribute to product development into the CI/CD toolchain, otherwise the product release will be slowed down significantly by the not integrated processes, which are necessary to release a product. Up to now in many companies these, so called supporting, processes are often not integrated in the CI/CD toolchain and are sometimes not as automated as they could be. This applies also to the OSS compliance process. In other words the OSS compliance process needs to be as automated as possible and the used tools for OSS compliance need to be fully integrated in the develpment CI/CD toolchain. This requires that the different tools need to provide suited APIs to be plugged in easily into the different developement toolchains. Moreover more and more publicly available services and data sources dealing with OSS compliance matters, these need also be considered and integrated in this workflow. To have an integrated OSS compliance process means not only the process to produce the compliance artifacts for outbound products, also contributions back to the OSS ecosystem have to be integrated to ensure that contributions can be fedback in a timely manner. To build an integrated end to end compliance toolchain is not about to build a monolithic monster, it is about to use current available Open Source tools and define and implement the needed APIs/Data structures they need to provide, in order to plug them into the current set up CI/CD workflow and to enable them to trigger other Open Source compliance tools in a way that they seamlessly interact which each other and potential external data sources. Building a monolithic monster will not work neither for the project that aims to build it nor for most of the entities that have a demand in tooling. This is proven by many other projects which had this objective no matter whether they were OSS or commercial ones. We follow the \"Unix\" like aproach - there is one tool for a certain required functionality which is specialized on that functionality and these different tools can be hooked up easily to form in the end a complaince pipeline. This is also the most suited strategy to get those tools widely adopted since many entities have some tooling available and an existing landscape, they simply cannot go for a \"big bang\" migration, a smooth migration is key here. Abstract Toolchain","title":"Overview"},{"location":"Tooling-Landscape/DataModel/","text":"Data Structures Different kind of data are generated and consumed by the functional blocks, which comprise an end to end compliance tool chain. All data which have to be produced/exchanged/consumed are presented here. This does not mean that every functional block has to deal with all data. These data structures shall be regarded as the \"final\" collection of all needed data and the functional blocks consume and/or generate the subsets of data they are aware of. If a certain implementation of the functional blocks in a specific workflow identifies the need of further implementation specific data they can be added as \"specific data\". Build environment description Sometimes a description of the build environment, which was used to build the software product, is required. This data type implements this. It is assumed that the description of the build environment qualifies a distinct deliverable. Like an embedded firmware image or a container(s) or simply a certain executable Content This class is the representation of a certain piece of \"software\". It can be a binary package or a source package. Constraint Contraints are requirements that have to be fulfilled. These are for example the obligations a license defines or constrains that products have to fulfill when they integrate other products. The design of an contstraint shall be in a way that a constraint can be defined in a specific company environment in accordance to the company specific poliy. On the other hand a constraint can also be made available via a publicly available resource. Besides a license or a product also ECC qualitication can define a certain constraint. CopyrightECCInformation This is a representation of additional information like copyrights or ecc information DataModelMetaInformation This is the meta information of the model itself, like name, version, etc. Deliverable A deliverable implements a real deliverable of a product. A product can be made available in different formats, like as container(s), an executable, an image etc. The different options are modeled as deliverable Disclosure document The disclosure document is often named as OSS declaration or OSS disclosure document or ReadME_OSS Digital Artifact A digital artifact represents an distinct identifiable part of a product, i.e. an element of the bill of material. It can be an OSS pacakge, a commercial library, a cerain font, an icon, a picture, a called 3rd party service. Especially in case of mobile apps these artifacts have to be taken into account. In SPDX this is called a Package. Coordinates This class represents the coordinates of a DigitalArtifact in a certain technology, i.e., the typical reference of a unique component version in this technology. E.g., maven coordinates for a component on maven central. LicenseExpression Representation of a SPDX license expression that combines a set of licenses to the licenses expression attached to a DigitalArtifact LicenseSelector Property of the usage of a DigitalArtifact in a Deliverable, used to express the used licenses in cases where a DigitalArtifact allows license selection. License The license data model is based on the current SPDX definition of a license, the SPDX specification itself is licensed und CC-BY-3.0. The SPDX license definiton lacks from a compliance process point of view some data which are important to implement an integrated compliance workflow taking care of company specific requirements. This definition has the purpose to provide such abbtional data. ProductInformation This data type defines is the meta information of a specific product. A product in this context can be everything a company makes available to 3rd parties. Note that a product can consist of other products, which may introduce certain constraints to the integrating product. SwBundle This represents the real item which is made available to 3rd parties,e.g. it is the executable, which is made available to 3rd parties.","title":"Toolchain Data Model"},{"location":"Tooling-Landscape/DataModel/#data-structures","text":"Different kind of data are generated and consumed by the functional blocks, which comprise an end to end compliance tool chain. All data which have to be produced/exchanged/consumed are presented here. This does not mean that every functional block has to deal with all data. These data structures shall be regarded as the \"final\" collection of all needed data and the functional blocks consume and/or generate the subsets of data they are aware of. If a certain implementation of the functional blocks in a specific workflow identifies the need of further implementation specific data they can be added as \"specific data\".","title":"Data Structures"},{"location":"Tooling-Landscape/DataModel/#build-environment-description","text":"Sometimes a description of the build environment, which was used to build the software product, is required. This data type implements this. It is assumed that the description of the build environment qualifies a distinct deliverable. Like an embedded firmware image or a container(s) or simply a certain executable","title":"Build environment description"},{"location":"Tooling-Landscape/DataModel/#content","text":"This class is the representation of a certain piece of \"software\". It can be a binary package or a source package.","title":"Content"},{"location":"Tooling-Landscape/DataModel/#constraint","text":"Contraints are requirements that have to be fulfilled. These are for example the obligations a license defines or constrains that products have to fulfill when they integrate other products. The design of an contstraint shall be in a way that a constraint can be defined in a specific company environment in accordance to the company specific poliy. On the other hand a constraint can also be made available via a publicly available resource. Besides a license or a product also ECC qualitication can define a certain constraint.","title":"Constraint"},{"location":"Tooling-Landscape/DataModel/#copyrighteccinformation","text":"This is a representation of additional information like copyrights or ecc information","title":"CopyrightECCInformation"},{"location":"Tooling-Landscape/DataModel/#datamodelmetainformation","text":"This is the meta information of the model itself, like name, version, etc.","title":"DataModelMetaInformation"},{"location":"Tooling-Landscape/DataModel/#deliverable","text":"A deliverable implements a real deliverable of a product. A product can be made available in different formats, like as container(s), an executable, an image etc. The different options are modeled as deliverable","title":"Deliverable"},{"location":"Tooling-Landscape/DataModel/#disclosure-document","text":"The disclosure document is often named as OSS declaration or OSS disclosure document or ReadME_OSS","title":"Disclosure document"},{"location":"Tooling-Landscape/DataModel/#digital-artifact","text":"A digital artifact represents an distinct identifiable part of a product, i.e. an element of the bill of material. It can be an OSS pacakge, a commercial library, a cerain font, an icon, a picture, a called 3rd party service. Especially in case of mobile apps these artifacts have to be taken into account. In SPDX this is called a Package.","title":"Digital Artifact"},{"location":"Tooling-Landscape/DataModel/#coordinates","text":"This class represents the coordinates of a DigitalArtifact in a certain technology, i.e., the typical reference of a unique component version in this technology. E.g., maven coordinates for a component on maven central.","title":"Coordinates"},{"location":"Tooling-Landscape/DataModel/#licenseexpression","text":"Representation of a SPDX license expression that combines a set of licenses to the licenses expression attached to a DigitalArtifact","title":"LicenseExpression"},{"location":"Tooling-Landscape/DataModel/#licenseselector","text":"Property of the usage of a DigitalArtifact in a Deliverable, used to express the used licenses in cases where a DigitalArtifact allows license selection.","title":"LicenseSelector"},{"location":"Tooling-Landscape/DataModel/#license","text":"The license data model is based on the current SPDX definition of a license, the SPDX specification itself is licensed und CC-BY-3.0. The SPDX license definiton lacks from a compliance process point of view some data which are important to implement an integrated compliance workflow taking care of company specific requirements. This definition has the purpose to provide such abbtional data.","title":"License"},{"location":"Tooling-Landscape/DataModel/#productinformation","text":"This data type defines is the meta information of a specific product. A product in this context can be everything a company makes available to 3rd parties. Note that a product can consist of other products, which may introduce certain constraints to the integrating product.","title":"ProductInformation"},{"location":"Tooling-Landscape/DataModel/#swbundle","text":"This represents the real item which is made available to 3rd parties,e.g. it is the executable, which is made available to 3rd parties.","title":"SwBundle"},{"location":"Tooling-Landscape/Toolchain-description/","text":"Identified Parts of the Toolchain Abstract Toolchain In the big picture the main functional building blocks are listed that will be required to integrate and automate an end to end compliance toolchain. These blocks do not represent concrete OSS tools, but depict logical functionalities that are required. However, concrete OSS tools and initiatives can be integrated into the landscape to. This is exactly what this project aims to achieve. Please note that the picture above does not list all the company external available data sources. The purpose of the big picture is to provide an easy to understand overview what this entire project is all about. Company External Public Compliance Artifact Repos Sytems or serives that provide compliance related data and information. These data may be specific for a certain software component release or specific to a OSS compliant license, like the interpretation of certain licenses.As well as any other data needed in an license compliance process. Public compliance artifact repos which targert OSS compliant licenses and their obligations, permissions, restrictions and risks are the OSADL License Checklists or Finos . The SPDX license list is also regraded as public compliance artifact repo, which provides standardized names for certain licenses please see the SPDX License List ClearlyDefined is an open source project which has the mission to help FOSS projects thrive by being, well, clearly defined. ClearlyDefined will pursue any data that makes FOSS projects easier to consume and thus more successful. Initially this work focuses on licensing data that form the core of understanding and meeting the legal obligations related to using FOSS. This includes: License (declared and observed) Copyright holders Source location (including revision/commit) For more details see ClearlyDefined Software Heritage can also regraded as public artifact repo, although compliance information is not in the central focus, Software Heritage provides infomration of software which was/is available on the internet, please see the Software Heritage Company Internal Artifact Repository A system or service providing (binary) software artifacts and metadata stored in a defined directory structure which is used to retrieve artifacts during a build process. This is used as a cache for the external Artifact Repository to ensure the availability of all components used within the company, it is also the storage for the build software artifacts of the company, used in the Continuous Integration Infrastructure to store the build results. Example: Archiva Binary analyser A system or service that analyses binary files, like executables or libraries. Its main purpose is to identify the contents of binary files and making this information available for further analysis, such as license compliance, security research or composition analysis. Example: Binary Analysis Next Generation Build Tools A system that builds a software project and creates the binaries and executables for the software. During this process, the build technology has a technology dependent way to identify and provide dependencies needed to build and run the software. This information is one data source for the complaince check on the project. Compliance artifact consistency A system or service that takes the following elements: the concrete deliverable of a software product or service the OSS disclosure document the source code bundle to be delivered The complaince artifact consistency checks whether these three artifacts are consistent and complete . I.e. whether all found OSS incredients of the deliverable are listed in the disclosure document with the correct version and whether the source code bundle includes at least the component versions were copy left licenses apply. It is a kind of quality assurance functionality at the end of the OSS compliance process. Component Analysis Service Dedicated tools and services which scan the source code concerning intergated 3rd party code snippets and aim to provide license information about the origin and applicable license of the source code snippets. These kind of tools or services are often called scanner for plagiarism . Component inventory (Metadata Repository) A system or service that stores metadata about used software components. This includes meta data like ids of the components in other systems, licenses, copyrights, known vulnerabilitites and information, that is needed to do export classifications (ECCN), such as information about the contained cryptographic functionality. The Component Metadata Repository can be linked to an external FOSS Metadata Database to retrieve commonly known information and make it usable within the organization. Also Security Vulnerability Database and other sources for e.g. export classification-relevant data, can be linked to retrieve the necessary information and to make it available within the company. Example: Eclipse SW360 Container content resolver A system or service that analyses a given software container to determine the packages and their metadata installed in the container image. Thus the container content resolver provides the bill of material of a container image. Example: Tern Continuous Integration/Deployment Infrastructure (CI/CD) Systems or services that orchestrate the build and deployment process for a software project and executes workflows triggered by different kind of events. The CI/CD infrastructure typically runs software builds and executes further build steps like testing and the compliance checks FOSS Compliance Bundle Generator A tool that creates all the necessary documentation needed for the distribution of a software e.g. a so called FOSS disclosure document consisting of: required legal notices optional: a written offer to provide the complete corresponding source code with data whom to contact list of all integrated components with all: copyright notices acknowledgements applicable licenses Another output the FOSS compliance bundle generator produces is the source code bundle consiting of the source code of the integrated FOSS packages. As well as the description of the build enviroment. Note that different delivery models of a product may require different FOSS compliance bundles. Example: Eclipse SW360antenna Dependency resolver A tool that determines the dependencies of software projects. Tt its technology and package manager specific how dependencies are expressed - thus there need to be dedicated functionality of the different package managers in use. The dependency resolver ensures the all dependencies are resolved recursively. To ensure that the output is a technology and package manager neutral complete list of dependencies. Example: ORT Analyzer License & Copyright Scanner A tool that analyses source code to identify license and copyright information. usually these tools need tp provide a UI in order to be able to review the tool findings and if necessary to correct the tool findings. Example of a license and copyright scanner, which provides review and correction capabilities : Fossology A list of License & copyright scanners is available at LicenseScannerComparison License Obligations Database System or service which provides for licenses its legal analysis. Usually the licenses analysis results in the more easy to understand: obligations restrictions permissions risks An obligation is for example that the text of the license has to be provided together with the software. A restriction is for example that one is not allowed to impose further restrictions on the recipients exercise of the rights granted in the license. Examples for a data base storing and using such data: Eclipse SW360 or Fossology Examples for the content are listed in Company External Obligation fulfillment A system or service where all the obligations resulting from the integrated OSS compontents are agregated. How theses obligations are fulfilled for da certain deliverable is documented and made avialable to provide an audit trail that a certain deliverable is made available in a license compliant way. Policy checker (Compliance Checker) System or service which takes at least the concrete deliverable of a software product or service, the licenses of the the integrated OSS components and checks whether the conrete deliverable is inline with the company policy for the specific product category and the deliverable. Example: Eclipse SW360antenna E.g. Not all licenses may be allowed for a certain product or service category or certain licenses may not be allowed for a certain deliverable, etc. Product Metadata Repository Software products and most software components are built from other software components. The Product Metadata Repository contains this relationship information to enable the management of dependencies over the life cycle of the software. Example: Eclipse SW360 Source Code Repo Systems or services that provide source code. This is typically (also) a version control system. For the compliance tooling, typically the source code is needed as a folder on a file share, i.e., the source code is already checked out by, e.g., the Continuous Integration infrastructure. Source package downloader System or service which downloads all the source packages from external data source if they are not yet known and available inside the organization. The source package downloader transfers the downloaded packages to the component inventory. Example: ORT Downloader","title":"Toolchain Elements Description"},{"location":"Tooling-Landscape/Toolchain-description/#identified-parts-of-the-toolchain","text":"Abstract Toolchain In the big picture the main functional building blocks are listed that will be required to integrate and automate an end to end compliance toolchain. These blocks do not represent concrete OSS tools, but depict logical functionalities that are required. However, concrete OSS tools and initiatives can be integrated into the landscape to. This is exactly what this project aims to achieve. Please note that the picture above does not list all the company external available data sources. The purpose of the big picture is to provide an easy to understand overview what this entire project is all about.","title":"Identified Parts of the Toolchain"},{"location":"Tooling-Landscape/Toolchain-description/#company-external","text":"","title":"Company External"},{"location":"Tooling-Landscape/Toolchain-description/#public-compliance-artifact-repos","text":"Sytems or serives that provide compliance related data and information. These data may be specific for a certain software component release or specific to a OSS compliant license, like the interpretation of certain licenses.As well as any other data needed in an license compliance process. Public compliance artifact repos which targert OSS compliant licenses and their obligations, permissions, restrictions and risks are the OSADL License Checklists or Finos . The SPDX license list is also regraded as public compliance artifact repo, which provides standardized names for certain licenses please see the SPDX License List ClearlyDefined is an open source project which has the mission to help FOSS projects thrive by being, well, clearly defined. ClearlyDefined will pursue any data that makes FOSS projects easier to consume and thus more successful. Initially this work focuses on licensing data that form the core of understanding and meeting the legal obligations related to using FOSS. This includes: License (declared and observed) Copyright holders Source location (including revision/commit) For more details see ClearlyDefined Software Heritage can also regraded as public artifact repo, although compliance information is not in the central focus, Software Heritage provides infomration of software which was/is available on the internet, please see the Software Heritage","title":"Public Compliance Artifact Repos"},{"location":"Tooling-Landscape/Toolchain-description/#company-internal","text":"","title":"Company Internal"},{"location":"Tooling-Landscape/Toolchain-description/#artifact-repository","text":"A system or service providing (binary) software artifacts and metadata stored in a defined directory structure which is used to retrieve artifacts during a build process. This is used as a cache for the external Artifact Repository to ensure the availability of all components used within the company, it is also the storage for the build software artifacts of the company, used in the Continuous Integration Infrastructure to store the build results. Example: Archiva","title":"Artifact Repository"},{"location":"Tooling-Landscape/Toolchain-description/#binary-analyser","text":"A system or service that analyses binary files, like executables or libraries. Its main purpose is to identify the contents of binary files and making this information available for further analysis, such as license compliance, security research or composition analysis. Example: Binary Analysis Next Generation","title":"Binary analyser"},{"location":"Tooling-Landscape/Toolchain-description/#build-tools","text":"A system that builds a software project and creates the binaries and executables for the software. During this process, the build technology has a technology dependent way to identify and provide dependencies needed to build and run the software. This information is one data source for the complaince check on the project.","title":"Build Tools"},{"location":"Tooling-Landscape/Toolchain-description/#compliance-artifact-consistency","text":"A system or service that takes the following elements: the concrete deliverable of a software product or service the OSS disclosure document the source code bundle to be delivered The complaince artifact consistency checks whether these three artifacts are consistent and complete . I.e. whether all found OSS incredients of the deliverable are listed in the disclosure document with the correct version and whether the source code bundle includes at least the component versions were copy left licenses apply. It is a kind of quality assurance functionality at the end of the OSS compliance process.","title":"Compliance artifact consistency"},{"location":"Tooling-Landscape/Toolchain-description/#component-analysis-service","text":"Dedicated tools and services which scan the source code concerning intergated 3rd party code snippets and aim to provide license information about the origin and applicable license of the source code snippets. These kind of tools or services are often called scanner for plagiarism .","title":"Component Analysis Service"},{"location":"Tooling-Landscape/Toolchain-description/#component-inventory-metadata-repository","text":"A system or service that stores metadata about used software components. This includes meta data like ids of the components in other systems, licenses, copyrights, known vulnerabilitites and information, that is needed to do export classifications (ECCN), such as information about the contained cryptographic functionality. The Component Metadata Repository can be linked to an external FOSS Metadata Database to retrieve commonly known information and make it usable within the organization. Also Security Vulnerability Database and other sources for e.g. export classification-relevant data, can be linked to retrieve the necessary information and to make it available within the company. Example: Eclipse SW360","title":"Component inventory (Metadata Repository)"},{"location":"Tooling-Landscape/Toolchain-description/#container-content-resolver","text":"A system or service that analyses a given software container to determine the packages and their metadata installed in the container image. Thus the container content resolver provides the bill of material of a container image. Example: Tern","title":"Container content resolver"},{"location":"Tooling-Landscape/Toolchain-description/#continuous-integrationdeployment-infrastructure-cicd","text":"Systems or services that orchestrate the build and deployment process for a software project and executes workflows triggered by different kind of events. The CI/CD infrastructure typically runs software builds and executes further build steps like testing and the compliance checks","title":"Continuous Integration/Deployment Infrastructure (CI/CD)"},{"location":"Tooling-Landscape/Toolchain-description/#foss-compliance-bundle-generator","text":"A tool that creates all the necessary documentation needed for the distribution of a software e.g. a so called FOSS disclosure document consisting of: required legal notices optional: a written offer to provide the complete corresponding source code with data whom to contact list of all integrated components with all: copyright notices acknowledgements applicable licenses Another output the FOSS compliance bundle generator produces is the source code bundle consiting of the source code of the integrated FOSS packages. As well as the description of the build enviroment. Note that different delivery models of a product may require different FOSS compliance bundles. Example: Eclipse SW360antenna","title":"FOSS Compliance Bundle Generator"},{"location":"Tooling-Landscape/Toolchain-description/#dependency-resolver","text":"A tool that determines the dependencies of software projects. Tt its technology and package manager specific how dependencies are expressed - thus there need to be dedicated functionality of the different package managers in use. The dependency resolver ensures the all dependencies are resolved recursively. To ensure that the output is a technology and package manager neutral complete list of dependencies. Example: ORT Analyzer","title":"Dependency resolver"},{"location":"Tooling-Landscape/Toolchain-description/#license-copyright-scanner","text":"A tool that analyses source code to identify license and copyright information. usually these tools need tp provide a UI in order to be able to review the tool findings and if necessary to correct the tool findings. Example of a license and copyright scanner, which provides review and correction capabilities : Fossology A list of License & copyright scanners is available at LicenseScannerComparison","title":"License &amp; Copyright Scanner"},{"location":"Tooling-Landscape/Toolchain-description/#license-obligations-database","text":"System or service which provides for licenses its legal analysis. Usually the licenses analysis results in the more easy to understand: obligations restrictions permissions risks An obligation is for example that the text of the license has to be provided together with the software. A restriction is for example that one is not allowed to impose further restrictions on the recipients exercise of the rights granted in the license. Examples for a data base storing and using such data: Eclipse SW360 or Fossology Examples for the content are listed in Company External","title":"License Obligations Database"},{"location":"Tooling-Landscape/Toolchain-description/#obligation-fulfillment","text":"A system or service where all the obligations resulting from the integrated OSS compontents are agregated. How theses obligations are fulfilled for da certain deliverable is documented and made avialable to provide an audit trail that a certain deliverable is made available in a license compliant way.","title":"Obligation fulfillment"},{"location":"Tooling-Landscape/Toolchain-description/#policy-checker-compliance-checker","text":"System or service which takes at least the concrete deliverable of a software product or service, the licenses of the the integrated OSS components and checks whether the conrete deliverable is inline with the company policy for the specific product category and the deliverable. Example: Eclipse SW360antenna E.g. Not all licenses may be allowed for a certain product or service category or certain licenses may not be allowed for a certain deliverable, etc.","title":"Policy checker (Compliance Checker)"},{"location":"Tooling-Landscape/Toolchain-description/#product-metadata-repository","text":"Software products and most software components are built from other software components. The Product Metadata Repository contains this relationship information to enable the management of dependencies over the life cycle of the software. Example: Eclipse SW360","title":"Product Metadata Repository"},{"location":"Tooling-Landscape/Toolchain-description/#source-code-repo","text":"Systems or services that provide source code. This is typically (also) a version control system. For the compliance tooling, typically the source code is needed as a folder on a file share, i.e., the source code is already checked out by, e.g., the Continuous Integration infrastructure.","title":"Source Code Repo"},{"location":"Tooling-Landscape/Toolchain-description/#source-package-downloader","text":"System or service which downloads all the source packages from external data source if they are not yet known and available inside the organization. The source package downloader transfers the downloaded packages to the component inventory. Example: ORT Downloader","title":"Source package downloader"}]}